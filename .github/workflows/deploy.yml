name: Deploy

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        echo "Host ${{ secrets.SERVER_HOST }}" > ~/.ssh/config
        echo "  HostName ${{ secrets.SERVER_HOST }}" >> ~/.ssh/config
        echo "  Port ${{ secrets.SSH_PORT }}" >> ~/.ssh/config
        echo "  IdentityFile ~/.ssh/deploy_key" >> ~/.ssh/config
        echo "  User ${{ secrets.SERVER_USERNAME }}" >> ~/.ssh/config
        ssh-keyscan -H -p ${{ secrets.SSH_PORT }} ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
    
    - name: Deploy to server
      run: |
        ssh ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "
          # 设置NVM环境
          export NVM_DIR=\"\$HOME/.nvm\"
          [ -s \"\$NVM_DIR/nvm.sh\" ] && \. \"\$NVM_DIR/nvm.sh\"
          
          # 如果部署目录不存在，创建它
          mkdir -p ${{ secrets.DEPLOY_PATH }}
          
          # 进入项目目录
          cd ${{ secrets.DEPLOY_PATH }}
          
          # 如果不是git仓库，初始化它
          if [ ! -d .git ]; then
            git init
            git remote add origin https://github.com/adrainlee/Pocket-Ledger.git
          fi
          
          # 保存当前的.env文件（如果存在）
          if [ -f .env ]; then
            cp .env .env.backup
          fi
          
          # 拉取最新代码
          git fetch origin main
          git reset --hard origin/main
          
          # 恢复.env文件
          if [ -f .env.backup ]; then
            mv .env.backup .env
          fi
          
          # 确保Node.js 18已安装
          nvm install 18
          nvm use 18
          
          # 全局安装PM2（如果未安装）
          if ! command -v pm2 &> /dev/null; then
            npm install -g pm2
          fi
          
          # 启动或重启Docker服务
          docker compose down || true
          docker compose up -d
          
          # 等待数据库服务就绪
          echo 'Waiting for database to be ready...'
          sleep 10
          
          # 安装依赖
          npm install
          
          # 运行数据库迁移
          npx prisma generate
          npx prisma migrate deploy
          
          # 构建应用
          npm run build
          
          # 重启应用服务
          pm2 restart expense-tracker || pm2 start 'npm run start' --name \"expense-tracker\"
        "